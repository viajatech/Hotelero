#Sistema Hotelero by David Ruiz (@viajatech)
#Puedes usar mi programa siempre y cuando me des créditos en mis redes sociales y des estrella a este repositorio,gracias! 



#pip install PyQt5 reportlab qrcode bcrypt PyPDF2 openpyxl pandas matplotlib requests pillow python-docx


import sys
import os
from PyQt5 import QtWidgets, QtGui, QtCore
import sqlite3
import bcrypt
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import requests
import datetime
from PIL import Image, ImageDraw
from docx import Document
from docx.shared import Inches

class HoteleroApp(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Hotelero by Viaja Tech")
        self.setGeometry(100, 100, 1200, 800)

        # Conectar a la base de datos
        self.conn = sqlite3.connect('hotelero.db')
        self.cursor = self.conn.cursor()
        self.create_tables()

        self.current_user_role = None  # Rol del usuario actual
        self.current_user_name = None  # Nombre de usuario actual

        self.initUI()

    def initUI(self):
        self.login_screen()

    def create_tables(self):
        # Crear tablas necesarias en la base de datos
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS employees (
                employee_id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT,
                username TEXT UNIQUE,
                password BLOB,
                role TEXT
            )
        ''')
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS sessions (
                session_id INTEGER PRIMARY KEY AUTOINCREMENT,
                employee_id INTEGER,
                login_time TEXT,
                FOREIGN KEY(employee_id) REFERENCES employees(employee_id)
            )
        ''')
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS rooms (
                room_number INTEGER PRIMARY KEY,
                room_type TEXT,
                status TEXT,
                is_vip BOOLEAN
            )
        ''')
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS guests (
                guest_id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT,
                phone TEXT,
                email TEXT,
                status TEXT,
                extra_charges REAL,
                num_occupants INTEGER,
                qr_code TEXT
            )
        ''')
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS reservations (
                reservation_id INTEGER PRIMARY KEY AUTOINCREMENT,
                guest_id INTEGER,
                room_number INTEGER,
                check_in_date TEXT,
                check_out_date TEXT,
                num_nights INTEGER,
                price_per_night REAL,
                total_cost REAL,
                status TEXT,
                notes TEXT,
                FOREIGN KEY(guest_id) REFERENCES guests(guest_id),
                FOREIGN KEY(room_number) REFERENCES rooms(room_number)
            )
        ''')
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS suppliers (
                supplier_id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT,
                contact TEXT,
                amount_due REAL,
                debt_date TEXT
            )
        ''')
        self.conn.commit()

    def login_screen(self):
        # Pantalla de inicio de sesión
        self.login_widget = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout()

        title = QtWidgets.QLabel("Bienvenido a Hotelero by Viaja Tech")
        title.setAlignment(QtCore.Qt.AlignCenter)
        title.setFont(QtGui.QFont("Arial", 24))

        form_layout = QtWidgets.QFormLayout()
        self.username_input = QtWidgets.QLineEdit()
        self.password_input = QtWidgets.QLineEdit()
        self.password_input.setEchoMode(QtWidgets.QLineEdit.Password)

        form_layout.addRow("Usuario:", self.username_input)
        form_layout.addRow("Contraseña:", self.password_input)

        self.login_button = QtWidgets.QPushButton("Iniciar Sesión")
        self.login_button.clicked.connect(self.login)

        self.register_button = QtWidgets.QPushButton("Registrar Empleado")
        self.register_button.clicked.connect(self.register_employee)

        layout.addWidget(title)
        layout.addLayout(form_layout)
        layout.addWidget(self.login_button)
        layout.addWidget(self.register_button)

        self.login_widget.setLayout(layout)
        self.setCentralWidget(self.login_widget)

    def login(self):
        username = self.username_input.text()
        password = self.password_input.text()

        if not all([username, password]):
            QtWidgets.QMessageBox.warning(self, "Error", "Por favor, ingresa usuario y contraseña.")
            return

        try:
            self.cursor.execute('SELECT employee_id, password, role, name FROM employees WHERE username = ?', (username,))
            result = self.cursor.fetchone()

            if result:
                employee_id, stored_password, role, name = result

                # Asegurarse de que stored_password es de tipo bytes
                if isinstance(stored_password, memoryview):
                    stored_password = stored_password.tobytes()

                if bcrypt.checkpw(password.encode('utf-8'), stored_password):
                    self.current_user_role = role
                    self.current_user_name = name
                    QtWidgets.QMessageBox.information(self, "Éxito", f"¡Bienvenido {name}!")
                    # Registrar sesión
                    login_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    self.cursor.execute('''
                        INSERT INTO sessions (employee_id, login_time) VALUES (?, ?)
                    ''', (employee_id, login_time))
                    self.conn.commit()
                    self.main_menu()
                else:
                    QtWidgets.QMessageBox.warning(self, "Error", "Usuario o contraseña incorrectos.")
            else:
                QtWidgets.QMessageBox.warning(self, "Error", "Usuario o contraseña incorrectos.")
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "Error", f"Ocurrió un error: {str(e)}")
            print(f"Error en login: {e}")

    def register_employee(self):
        # Ventana de registro de nuevo empleado
        self.register_widget = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout()

        form_layout = QtWidgets.QFormLayout()
        self.reg_name_input = QtWidgets.QLineEdit()
        self.reg_username_input = QtWidgets.QLineEdit()
        self.reg_password_input = QtWidgets.QLineEdit()
        self.reg_password_input.setEchoMode(QtWidgets.QLineEdit.Password)
        self.reg_role_input = QtWidgets.QComboBox()
        self.reg_role_input.addItems(["Administrador", "Recepcionista", "Gerente", "Becario"])

        form_layout.addRow("Nombre:", self.reg_name_input)
        form_layout.addRow("Usuario:", self.reg_username_input)
        form_layout.addRow("Contraseña:", self.reg_password_input)
        form_layout.addRow("Rol:", self.reg_role_input)

        self.create_employee_button = QtWidgets.QPushButton("Crear Empleado")
        self.create_employee_button.clicked.connect(self.create_employee)

        layout.addLayout(form_layout)
        layout.addWidget(self.create_employee_button)

        self.register_widget.setLayout(layout)
        self.register_widget.setWindowTitle("Registrar Nuevo Empleado")
        self.register_widget.setGeometry(200, 200, 400, 300)
        self.register_widget.show()

    def create_employee(self):
        name = self.reg_name_input.text()
        username = self.reg_username_input.text()
        password = self.reg_password_input.text()
        role = self.reg_role_input.currentText()

        if not all([name, username, password]):
            QtWidgets.QMessageBox.warning(self, "Error", "Por favor, completa todos los campos.")
            return

        hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())

        try:
            self.cursor.execute('''
                INSERT INTO employees (name, username, password, role) VALUES (?, ?, ?, ?)
            ''', (name, username, hashed_password, role))
            self.conn.commit()
            QtWidgets.QMessageBox.information(self, "Éxito", "Empleado registrado exitosamente.")
            self.register_widget.close()
        except sqlite3.IntegrityError:
            QtWidgets.QMessageBox.warning(self, "Error", "El nombre de usuario ya existe.")

    def main_menu(self):
        try:
            # Menú principal después de iniciar sesión
            self.main_widget = QtWidgets.QWidget()
            layout = QtWidgets.QVBoxLayout()

            self.tabs = QtWidgets.QTabWidget()
            layout.addWidget(self.tabs)

            if self.current_user_role in ["Administrador", "Gerente"]:
                self.employee_management_tab()
                self.supplier_management_tab()

            self.room_management_tab()
            self.reservation_management_tab()
            self.guest_management_tab()
            self.reports_tab()

            self.main_widget.setLayout(layout)
            self.setCentralWidget(self.main_widget)
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "Error", f"Ocurrió un error en el menú principal: {str(e)}")
            print(f"Error en main_menu: {e}")

    def employee_management_tab(self):
        # Pestaña de gestión de empleados
        self.employees_tab = QtWidgets.QWidget()
        self.tabs.addTab(self.employees_tab, "Empleados")

        layout = QtWidgets.QVBoxLayout()
        self.employees_table = QtWidgets.QTableWidget()
        self.employees_table.setColumnCount(5)
        self.employees_table.setHorizontalHeaderLabels(['ID', 'Nombre', 'Usuario', 'Rol', 'Último Inicio de Sesión'])
        self.load_employees_data()

        layout.addWidget(self.employees_table)
        self.employees_tab.setLayout(layout)

    def load_employees_data(self):
        self.cursor.execute('''
            SELECT e.employee_id, e.name, e.username, e.role, MAX(s.login_time)
            FROM employees e
            LEFT JOIN sessions s ON e.employee_id = s.employee_id
            GROUP BY e.employee_id
        ''')
        employees = self.cursor.fetchall()
        self.employees_table.setRowCount(0)
        for row_number, row_data in enumerate(employees):
            self.employees_table.insertRow(row_number)
            for column_number, data in enumerate(row_data):
                if data is None:
                    data = ''
                self.employees_table.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(data)))

    def supplier_management_tab(self):
        # Pestaña de gestión de proveedores
        self.suppliers_tab = QtWidgets.QWidget()
        self.tabs.addTab(self.suppliers_tab, "Proveedores")

        layout = QtWidgets.QVBoxLayout()
        self.suppliers_table = QtWidgets.QTableWidget()
        self.suppliers_table.setColumnCount(6)
        self.suppliers_table.setHorizontalHeaderLabels(['ID', 'Nombre', 'Contacto', 'Deuda', 'Fecha', 'Acciones'])
        self.load_suppliers_data()

        self.add_supplier_button = QtWidgets.QPushButton("Agregar Proveedor")
        self.add_supplier_button.clicked.connect(self.add_supplier)

        layout.addWidget(self.suppliers_table)
        layout.addWidget(self.add_supplier_button)
        self.suppliers_tab.setLayout(layout)

    def load_suppliers_data(self):
        self.cursor.execute('SELECT supplier_id, name, contact, amount_due, debt_date FROM suppliers')
        suppliers = self.cursor.fetchall()
        self.suppliers_table.setRowCount(0)
        for row_number, row_data in enumerate(suppliers):
            self.suppliers_table.insertRow(row_number)
            for column_number, data in enumerate(row_data):
                self.suppliers_table.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(data)))
            # Botón de acciones
            action_layout = QtWidgets.QHBoxLayout()
            edit_button = QtWidgets.QPushButton("Editar")
            edit_button.clicked.connect(lambda checked, sid=row_data[0]: self.edit_supplier(sid))
            delete_button = QtWidgets.QPushButton("Eliminar")
            delete_button.clicked.connect(lambda checked, sid=row_data[0]: self.delete_supplier(sid))
            action_widget = QtWidgets.QWidget()
            action_layout.addWidget(edit_button)
            action_layout.addWidget(delete_button)
            action_widget.setLayout(action_layout)
            self.suppliers_table.setCellWidget(row_number, 5, action_widget)

    def add_supplier(self):
        # Ventana para agregar un nuevo proveedor
        self.add_supplier_widget = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout()

        form_layout = QtWidgets.QFormLayout()
        self.supplier_name_input = QtWidgets.QLineEdit()
        self.supplier_contact_input = QtWidgets.QLineEdit()
        self.supplier_amount_input = QtWidgets.QLineEdit()
        self.supplier_date_input = QtWidgets.QDateEdit(QtCore.QDate.currentDate())

        form_layout.addRow("Nombre del Proveedor:", self.supplier_name_input)
        form_layout.addRow("Contacto:", self.supplier_contact_input)
        form_layout.addRow("Deuda Pendiente:", self.supplier_amount_input)
        form_layout.addRow("Fecha de Deuda:", self.supplier_date_input)

        self.create_supplier_button = QtWidgets.QPushButton("Crear Proveedor")
        self.create_supplier_button.clicked.connect(self.create_supplier)

        layout.addLayout(form_layout)
        layout.addWidget(self.create_supplier_button)

        self.add_supplier_widget.setLayout(layout)
        self.add_supplier_widget.setWindowTitle("Agregar Nuevo Proveedor")
        self.add_supplier_widget.setGeometry(200, 200, 400, 300)
        self.add_supplier_widget.show()

    def create_supplier(self):
        name = self.supplier_name_input.text()
        contact = self.supplier_contact_input.text()
        amount_due = self.supplier_amount_input.text()
        debt_date = self.supplier_date_input.date().toString('yyyy-MM-dd')

        if not name:
            QtWidgets.QMessageBox.warning(self, "Error", "Por favor, ingresa el nombre del proveedor.")
            return

        try:
            amount_due = float(amount_due) if amount_due else 0.0
        except ValueError:
            QtWidgets.QMessageBox.warning(self, "Error", "La deuda debe ser un número.")
            return

        self.cursor.execute('''
            INSERT INTO suppliers (name, contact, amount_due, debt_date) VALUES (?, ?, ?, ?)
        ''', (name, contact, amount_due, debt_date))
        self.conn.commit()
        QtWidgets.QMessageBox.information(self, "Éxito", "Proveedor creado exitosamente.")
        self.add_supplier_widget.close()
        self.load_suppliers_data()

    def edit_supplier(self, supplier_id):
        # Función para editar un proveedor existente
        self.edit_supplier_widget = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout()

        form_layout = QtWidgets.QFormLayout()

        self.cursor.execute('SELECT name, contact, amount_due, debt_date FROM suppliers WHERE supplier_id = ?', (supplier_id,))
        supplier_data = self.cursor.fetchone()
        if supplier_data:
            name, contact, amount_due, debt_date = supplier_data

        self.edit_supplier_name_input = QtWidgets.QLineEdit(name)
        self.edit_supplier_contact_input = QtWidgets.QLineEdit(contact)
        self.edit_supplier_amount_input = QtWidgets.QLineEdit(str(amount_due))
        self.edit_supplier_date_input = QtWidgets.QDateEdit(QtCore.QDate.fromString(debt_date, 'yyyy-MM-dd'))

        form_layout.addRow("Nombre del Proveedor:", self.edit_supplier_name_input)
        form_layout.addRow("Contacto:", self.edit_supplier_contact_input)
        form_layout.addRow("Deuda Pendiente:", self.edit_supplier_amount_input)
        form_layout.addRow("Fecha de Deuda:", self.edit_supplier_date_input)

        self.update_supplier_button = QtWidgets.QPushButton("Actualizar Proveedor")
        self.update_supplier_button.clicked.connect(lambda: self.update_supplier(supplier_id))

        layout.addLayout(form_layout)
        layout.addWidget(self.update_supplier_button)

        self.edit_supplier_widget.setLayout(layout)
        self.edit_supplier_widget.setWindowTitle("Editar Proveedor")
        self.edit_supplier_widget.setGeometry(200, 200, 400, 300)
        self.edit_supplier_widget.show()

    def update_supplier(self, supplier_id):
        name = self.edit_supplier_name_input.text()
        contact = self.edit_supplier_contact_input.text()
        amount_due = self.edit_supplier_amount_input.text()
        debt_date = self.edit_supplier_date_input.date().toString('yyyy-MM-dd')

        if not name:
            QtWidgets.QMessageBox.warning(self, "Error", "Por favor, ingresa el nombre del proveedor.")
            return

        try:
            amount_due = float(amount_due) if amount_due else 0.0
        except ValueError:
            QtWidgets.QMessageBox.warning(self, "Error", "La deuda debe ser un número.")
            return

        self.cursor.execute('''
            UPDATE suppliers SET name = ?, contact = ?, amount_due = ?, debt_date = ? WHERE supplier_id = ?
        ''', (name, contact, amount_due, debt_date, supplier_id))
        self.conn.commit()
        QtWidgets.QMessageBox.information(self, "Éxito", "Proveedor actualizado exitosamente.")
        self.edit_supplier_widget.close()
        self.load_suppliers_data()

    def delete_supplier(self, supplier_id):
        reply = QtWidgets.QMessageBox.question(self, 'Eliminar Proveedor',
                                               '¿Estás seguro de que deseas eliminar este proveedor?',
                                               QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No, QtWidgets.QMessageBox.No)
        if reply == QtWidgets.QMessageBox.Yes:
            self.cursor.execute('DELETE FROM suppliers WHERE supplier_id = ?', (supplier_id,))
            self.conn.commit()
            QtWidgets.QMessageBox.information(self, "Éxito", "Proveedor eliminado exitosamente.")
            self.load_suppliers_data()

    def room_management_tab(self):
        # Pestaña de gestión de habitaciones
        self.rooms_tab = QtWidgets.QWidget()
        self.tabs.addTab(self.rooms_tab, "Habitaciones")

        layout = QtWidgets.QVBoxLayout()
        self.rooms_graphics_view = QtWidgets.QGraphicsView()
        self.rooms_scene = QtWidgets.QGraphicsScene()
        self.rooms_graphics_view.setScene(self.rooms_scene)
        self.draw_rooms()

        self.add_room_button = QtWidgets.QPushButton("Agregar Habitación")
        self.add_room_button.clicked.connect(self.add_room)

        layout.addWidget(self.rooms_graphics_view)
        layout.addWidget(self.add_room_button)
        self.rooms_tab.setLayout(layout)

    def draw_rooms(self):
        self.rooms_scene.clear()
        self.cursor.execute('SELECT room_number, status FROM rooms')
        rooms = self.cursor.fetchall()
        x = 0
        y = 0
        for i, (room_number, status) in enumerate(rooms):
            rect = QtWidgets.QGraphicsRectItem(x, y, 100, 100)
            color = QtGui.QColor('green')  # Disponible
            if status == 'Ocupado':
                color = QtGui.QColor('yellow')
            elif status == 'En Mantenimiento':
                color = QtGui.QColor('orange')
            elif status == 'No Disponible':
                color = QtGui.QColor('red')
            elif status == 'Reservado':
                color = QtGui.QColor('blue')
            rect.setBrush(QtGui.QBrush(color))
            text = QtWidgets.QGraphicsTextItem(str(room_number), rect)
            text.setDefaultTextColor(QtGui.QColor('black'))
            text.setPos(x + 35, y + 40)
            self.rooms_scene.addItem(rect)
            x += 110
            if x >= 1100:
                x = 0
                y += 110

    def add_room(self):
        # Ventana para agregar una nueva habitación
        self.add_room_widget = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout()

        form_layout = QtWidgets.QFormLayout()
        self.room_number_input = QtWidgets.QLineEdit()
        self.room_type_input = QtWidgets.QComboBox()
        self.room_type_input.addItems(["Estándar", "Suite", "Deluxe"])
        self.room_status_input = QtWidgets.QComboBox()
        self.room_status_input.addItems(["Disponible", "Ocupado", "En Mantenimiento", "No Disponible", "Reservado"])
        self.room_vip_input = QtWidgets.QCheckBox("Es VIP")

        form_layout.addRow("Número de Habitación:", self.room_number_input)
        form_layout.addRow("Tipo de Habitación:", self.room_type_input)
        form_layout.addRow("Estado de Habitación:", self.room_status_input)
        form_layout.addRow("", self.room_vip_input)

        self.create_room_button = QtWidgets.QPushButton("Crear Habitación")
        self.create_room_button.clicked.connect(self.create_room)

        layout.addLayout(form_layout)
        layout.addWidget(self.create_room_button)

        self.add_room_widget.setLayout(layout)
        self.add_room_widget.setWindowTitle("Agregar Nueva Habitación")
        self.add_room_widget.setGeometry(200, 200, 400, 300)
        self.add_room_widget.show()

    def create_room(self):
        room_number = self.room_number_input.text()
        room_type = self.room_type_input.currentText()
        status = self.room_status_input.currentText()
        is_vip = self.room_vip_input.isChecked()

        if not room_number:
            QtWidgets.QMessageBox.warning(self, "Error", "Por favor, ingresa el número de habitación.")
            return

        try:
            self.cursor.execute('''
                INSERT INTO rooms (room_number, room_type, status, is_vip) VALUES (?, ?, ?, ?)
            ''', (room_number, room_type, status, is_vip))
            self.conn.commit()
            QtWidgets.QMessageBox.information(self, "Éxito", "Habitación creada exitosamente.")
            self.add_room_widget.close()
            self.draw_rooms()
        except sqlite3.IntegrityError:
            QtWidgets.QMessageBox.warning(self, "Error", "El número de habitación ya existe.")

    def reservation_management_tab(self):
        # Pestaña de gestión de reservas
        self.reservations_tab = QtWidgets.QWidget()
        self.tabs.addTab(self.reservations_tab, "Reservas")

        layout = QtWidgets.QVBoxLayout()
        self.reservations_table = QtWidgets.QTableWidget()
        self.reservations_table.setColumnCount(9)
        self.reservations_table.setHorizontalHeaderLabels(['ID', 'Huésped', 'Habitación', 'Check-In', 'Check-Out', 'Estado', 'Total', 'Ocupantes', 'Acciones'])
        self.load_reservations_data()

        self.add_reservation_button = QtWidgets.QPushButton("Agregar Reserva")
        self.add_reservation_button.clicked.connect(self.add_reservation)

        layout.addWidget(self.reservations_table)
        layout.addWidget(self.add_reservation_button)
        self.reservations_tab.setLayout(layout)

    def load_reservations_data(self):
        self.cursor.execute('''
            SELECT reservations.reservation_id, guests.name, reservations.room_number,
            reservations.check_in_date, reservations.check_out_date, reservations.status,
            reservations.total_cost, guests.num_occupants
            FROM reservations
            JOIN guests ON reservations.guest_id = guests.guest_id
        ''')
        reservations = self.cursor.fetchall()
        self.reservations_table.setRowCount(0)
        for row_number, row_data in enumerate(reservations):
            self.reservations_table.insertRow(row_number)
            for column_number, data in enumerate(row_data):
                self.reservations_table.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(data)))
            # Botón de acciones
            action_layout = QtWidgets.QHBoxLayout()
            edit_button = QtWidgets.QPushButton("Editar")
            edit_button.clicked.connect(lambda checked, rid=row_data[0]: self.edit_reservation(rid))
            delete_button = QtWidgets.QPushButton("Eliminar")
            delete_button.clicked.connect(lambda checked, rid=row_data[0]: self.delete_reservation(rid))
            action_widget = QtWidgets.QWidget()
            action_layout.addWidget(edit_button)
            action_layout.addWidget(delete_button)
            action_widget.setLayout(action_layout)
            self.reservations_table.setCellWidget(row_number, 8, action_widget)

    def add_reservation(self):
        # Ventana para agregar una nueva reserva
        self.add_reservation_widget = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout()

        form_layout = QtWidgets.QFormLayout()
        self.guest_name_input = QtWidgets.QLineEdit()
        self.guest_phone_input = QtWidgets.QLineEdit()
        self.guest_email_input = QtWidgets.QLineEdit()
        self.num_occupants_input = QtWidgets.QSpinBox()
        self.num_occupants_input.setMinimum(1)
        self.room_number_input = QtWidgets.QComboBox()
        self.load_available_rooms()
        self.check_in_date_input = QtWidgets.QDateEdit(QtCore.QDate.currentDate())
        self.check_out_date_input = QtWidgets.QDateEdit(QtCore.QDate.currentDate().addDays(1))
        self.price_per_night_input = QtWidgets.QLineEdit()
        self.notes_input = QtWidgets.QTextEdit()

        form_layout.addRow("Nombre del Huésped:", self.guest_name_input)
        form_layout.addRow("Teléfono del Huésped:", self.guest_phone_input)
        form_layout.addRow("Email del Huésped:", self.guest_email_input)
        form_layout.addRow("Número de Ocupantes:", self.num_occupants_input)
        form_layout.addRow("Número de Habitación:", self.room_number_input)
        form_layout.addRow("Fecha de Check-In:", self.check_in_date_input)
        form_layout.addRow("Fecha de Check-Out:", self.check_out_date_input)
        form_layout.addRow("Tarifa por Noche:", self.price_per_night_input)
        form_layout.addRow("Notas:", self.notes_input)

        self.create_reservation_button = QtWidgets.QPushButton("Crear Reserva")
        self.create_reservation_button.clicked.connect(self.create_reservation)

        layout.addLayout(form_layout)
        layout.addWidget(self.create_reservation_button)

        self.add_reservation_widget.setLayout(layout)
        self.add_reservation_widget.setWindowTitle("Agregar Nueva Reserva")
        self.add_reservation_widget.setGeometry(200, 200, 400, 600)
        self.add_reservation_widget.show()

    def load_available_rooms(self):
        self.room_number_input.clear()
        self.cursor.execute('SELECT room_number FROM rooms WHERE status = "Disponible" OR status = "Reservado"')
        rooms = self.cursor.fetchall()
        for room in rooms:
            self.room_number_input.addItem(str(room[0]))

    def create_reservation(self):
        guest_name = self.guest_name_input.text()
        guest_phone = self.guest_phone_input.text()
        guest_email = self.guest_email_input.text()
        num_occupants = self.num_occupants_input.value()
        room_number = self.room_number_input.currentText()
        check_in_date = self.check_in_date_input.date().toString('yyyy-MM-dd')
        check_out_date = self.check_out_date_input.date().toString('yyyy-MM-dd')
        price_per_night = self.price_per_night_input.text()
        notes = self.notes_input.toPlainText()

        if not guest_name and not guest_phone and not guest_email:
            QtWidgets.QMessageBox.warning(self, "Error", "Por favor, ingresa al menos un dato del huésped.")
            return

        try:
            price_per_night = float(price_per_night)
        except ValueError:
            QtWidgets.QMessageBox.warning(self, "Error", "La tarifa por noche debe ser un número.")
            return

        # Calcular número de noches
        check_in = datetime.datetime.strptime(check_in_date, '%Y-%m-%d')
        check_out = datetime.datetime.strptime(check_out_date, '%Y-%m-%d')
        num_nights = (check_out - check_in).days
        if num_nights <= 0:
            QtWidgets.QMessageBox.warning(self, "Error", "La fecha de check-out debe ser posterior a la de check-in.")
            return

        total_cost = num_nights * price_per_night

        # Insertar huésped
        self.cursor.execute('''
            INSERT INTO guests (name, phone, email, status, extra_charges, num_occupants) VALUES (?, ?, ?, ?, ?, ?)
        ''', (guest_name, guest_phone, guest_email, 'Normal', 0.0, num_occupants))
        guest_id = self.cursor.lastrowid

        # Insertar reserva
        self.cursor.execute('''
            INSERT INTO reservations (guest_id, room_number, check_in_date, check_out_date, num_nights, price_per_night, total_cost, status, notes)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (guest_id, room_number, check_in_date, check_out_date, num_nights, price_per_night, total_cost, 'Reservado', notes))
        self.conn.commit()

        # Actualizar estado de la habitación
        self.cursor.execute('''
            UPDATE rooms SET status = "Reservado" WHERE room_number = ?
        ''', (room_number,))
        self.conn.commit()

        QtWidgets.QMessageBox.information(self, "Éxito", "Reserva creada exitosamente.")
        self.add_reservation_widget.close()
        self.load_reservations_data()
        self.draw_rooms()

    def edit_reservation(self, reservation_id):
        # Función para editar una reserva existente
        self.edit_reservation_widget = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout()

        form_layout = QtWidgets.QFormLayout()

        self.cursor.execute('''
            SELECT guests.name, guests.phone, guests.email, guests.num_occupants,
            reservations.room_number, reservations.check_in_date, reservations.check_out_date,
            reservations.price_per_night, reservations.notes
            FROM reservations
            JOIN guests ON reservations.guest_id = guests.guest_id
            WHERE reservations.reservation_id = ?
        ''', (reservation_id,))
        data = self.cursor.fetchone()

        if data:
            guest_name, guest_phone, guest_email, num_occupants, room_number, check_in_date, check_out_date, price_per_night, notes = data

            self.edit_guest_name_input = QtWidgets.QLineEdit(guest_name)
            self.edit_guest_phone_input = QtWidgets.QLineEdit(guest_phone)
            self.edit_guest_email_input = QtWidgets.QLineEdit(guest_email)
            self.edit_num_occupants_input = QtWidgets.QSpinBox()
            self.edit_num_occupants_input.setMinimum(1)
            self.edit_num_occupants_input.setValue(num_occupants)
            self.edit_room_number_input = QtWidgets.QComboBox()
            self.load_available_rooms_edit(room_number)
            self.edit_check_in_date_input = QtWidgets.QDateEdit(QtCore.QDate.fromString(check_in_date, 'yyyy-MM-dd'))
            self.edit_check_out_date_input = QtWidgets.QDateEdit(QtCore.QDate.fromString(check_out_date, 'yyyy-MM-dd'))
            self.edit_price_per_night_input = QtWidgets.QLineEdit(str(price_per_night))
            self.edit_notes_input = QtWidgets.QTextEdit(notes)

            form_layout.addRow("Nombre del Huésped:", self.edit_guest_name_input)
            form_layout.addRow("Teléfono del Huésped:", self.edit_guest_phone_input)
            form_layout.addRow("Email del Huésped:", self.edit_guest_email_input)
            form_layout.addRow("Número de Ocupantes:", self.edit_num_occupants_input)
            form_layout.addRow("Número de Habitación:", self.edit_room_number_input)
            form_layout.addRow("Fecha de Check-In:", self.edit_check_in_date_input)
            form_layout.addRow("Fecha de Check-Out:", self.edit_check_out_date_input)
            form_layout.addRow("Tarifa por Noche:", self.edit_price_per_night_input)
            form_layout.addRow("Notas:", self.edit_notes_input)

            self.update_reservation_button = QtWidgets.QPushButton("Actualizar Reserva")
            self.update_reservation_button.clicked.connect(lambda: self.update_reservation(reservation_id))

            layout.addLayout(form_layout)
            layout.addWidget(self.update_reservation_button)

            self.edit_reservation_widget.setLayout(layout)
            self.edit_reservation_widget.setWindowTitle("Editar Reserva")
            self.edit_reservation_widget.setGeometry(200, 200, 400, 600)
            self.edit_reservation_widget.show()

    def load_available_rooms_edit(self, current_room_number):
        self.edit_room_number_input.clear()
        self.cursor.execute('SELECT room_number FROM rooms WHERE status = "Disponible" OR room_number = ?', (current_room_number,))
        rooms = self.cursor.fetchall()
        for room in rooms:
            self.edit_room_number_input.addItem(str(room[0]))
        index = self.edit_room_number_input.findText(str(current_room_number))
        self.edit_room_number_input.setCurrentIndex(index)

    def update_reservation(self, reservation_id):
        guest_name = self.edit_guest_name_input.text()
        guest_phone = self.edit_guest_phone_input.text()
        guest_email = self.edit_guest_email_input.text()
        num_occupants = self.edit_num_occupants_input.value()
        new_room_number = self.edit_room_number_input.currentText()
        check_in_date = self.edit_check_in_date_input.date().toString('yyyy-MM-dd')
        check_out_date = self.edit_check_out_date_input.date().toString('yyyy-MM-dd')
        price_per_night = self.edit_price_per_night_input.text()
        notes = self.edit_notes_input.toPlainText()

        try:
            price_per_night = float(price_per_night)
        except ValueError:
            QtWidgets.QMessageBox.warning(self, "Error", "La tarifa por noche debe ser un número.")
            return

        # Calcular número de noches
        check_in = datetime.datetime.strptime(check_in_date, '%Y-%m-%d')
        check_out = datetime.datetime.strptime(check_out_date, '%Y-%m-%d')
        num_nights = (check_out - check_in).days
        if num_nights <= 0:
            QtWidgets.QMessageBox.warning(self, "Error", "La fecha de check-out debe ser posterior a la de check-in.")
            return

        total_cost = num_nights * price_per_night

        # Actualizar reserva
        self.cursor.execute('''
            UPDATE reservations
            SET room_number = ?, check_in_date = ?, check_out_date = ?, num_nights = ?, price_per_night = ?, total_cost = ?, notes = ?
            WHERE reservation_id = ?
        ''', (new_room_number, check_in_date, check_out_date, num_nights, price_per_night, total_cost, notes, reservation_id))

        # Actualizar datos del huésped
        self.cursor.execute('''
            SELECT guest_id FROM reservations WHERE reservation_id = ?
        ''', (reservation_id,))
        guest_id = self.cursor.fetchone()[0]
        self.cursor.execute('''
            UPDATE guests
            SET name = ?, phone = ?, email = ?, num_occupants = ?
            WHERE guest_id = ?
        ''', (guest_name, guest_phone, guest_email, num_occupants, guest_id))

        self.conn.commit()
        QtWidgets.QMessageBox.information(self, "Éxito", "Reserva actualizada exitosamente.")
        self.edit_reservation_widget.close()
        self.load_reservations_data()
        self.draw_rooms()

    def delete_reservation(self, reservation_id):
        reply = QtWidgets.QMessageBox.question(self, 'Eliminar Reserva',
                                               '¿Estás seguro de que deseas eliminar esta reserva?',
                                               QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No, QtWidgets.QMessageBox.No)
        if reply == QtWidgets.QMessageBox.Yes:
            # Obtener room_number antes de eliminar
            self.cursor.execute('SELECT room_number FROM reservations WHERE reservation_id = ?', (reservation_id,))
            room_number = self.cursor.fetchone()[0]

            self.cursor.execute('DELETE FROM reservations WHERE reservation_id = ?', (reservation_id,))
            self.conn.commit()

            # Actualizar estado de la habitación
            self.cursor.execute('''
                UPDATE rooms SET status = "Disponible" WHERE room_number = ?
            ''', (room_number,))
            self.conn.commit()

            QtWidgets.QMessageBox.information(self, "Éxito", "Reserva eliminada exitosamente.")
            self.load_reservations_data()
            self.draw_rooms()

    def guest_management_tab(self):
        # Pestaña de gestión de huéspedes
        self.guests_tab = QtWidgets.QWidget()
        self.tabs.addTab(self.guests_tab, "Huéspedes")

        layout = QtWidgets.QVBoxLayout()
        self.guests_table = QtWidgets.QTableWidget()
        self.guests_table.setColumnCount(7)
        self.guests_table.setHorizontalHeaderLabels(['ID', 'Nombre', 'Teléfono', 'Email', 'Estado', 'Cargos Extras', 'Acciones'])
        self.load_guests_data()

        layout.addWidget(self.guests_table)
        self.guests_tab.setLayout(layout)

    def load_guests_data(self):
        self.cursor.execute('SELECT guest_id, name, phone, email, status, extra_charges FROM guests')
        guests = self.cursor.fetchall()
        self.guests_table.setRowCount(0)
        for row_number, row_data in enumerate(guests):
            self.guests_table.insertRow(row_number)
            for column_number, data in enumerate(row_data):
                self.guests_table.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(data)))
            # Botón de acciones
            action_button = QtWidgets.QPushButton("Agregar Cargos")
            action_button.clicked.connect(lambda checked, gid=row_data[0]: self.add_extra_charges(gid))
            self.guests_table.setCellWidget(row_number, 6, action_button)

    def add_extra_charges(self, guest_id):
        # Ventana para agregar cargos extras al huésped
        self.add_charges_widget = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout()

        form_layout = QtWidgets.QFormLayout()
        self.extra_charges_input = QtWidgets.QLineEdit()

        form_layout.addRow("Cargos Extras:", self.extra_charges_input)

        self.save_charges_button = QtWidgets.QPushButton("Guardar Cargos")
        self.save_charges_button.clicked.connect(lambda: self.save_extra_charges(guest_id))

        layout.addLayout(form_layout)
        layout.addWidget(self.save_charges_button)

        self.add_charges_widget.setLayout(layout)
        self.add_charges_widget.setWindowTitle("Agregar Cargos Extras")
        self.add_charges_widget.setGeometry(200, 200, 300, 150)
        self.add_charges_widget.show()

    def save_extra_charges(self, guest_id):
        extra_charges = self.extra_charges_input.text()

        try:
            extra_charges = float(extra_charges)
        except ValueError:
            QtWidgets.QMessageBox.warning(self, "Error", "Los cargos extras deben ser un número.")
            return

        self.cursor.execute('''
            UPDATE guests SET extra_charges = extra_charges + ? WHERE guest_id = ?
        ''', (extra_charges, guest_id))
        self.conn.commit()
        QtWidgets.QMessageBox.information(self, "Éxito", "Cargos extras agregados exitosamente.")
        self.add_charges_widget.close()
        self.load_guests_data()

    def reports_tab(self):
        # Pestaña de reportes y análisis
        self.reports_tab = QtWidgets.QWidget()
        self.tabs.addTab(self.reports_tab, "Reportes")

        layout = QtWidgets.QVBoxLayout()

        self.generate_income_report_button = QtWidgets.QPushButton("Generar Reporte de Ingresos")
        self.generate_income_report_button.clicked.connect(self.generate_income_report)

        self.generate_supplier_report_button = QtWidgets.QPushButton("Generar Reporte de Deudas a Proveedores")
        self.generate_supplier_report_button.clicked.connect(self.generate_supplier_debt_report)

        self.export_report_button = QtWidgets.QPushButton("Exportar Reporte")
        self.export_report_button.clicked.connect(self.export_report)

        layout.addWidget(self.generate_income_report_button)
        layout.addWidget(self.generate_supplier_report_button)
        layout.addWidget(self.export_report_button)

        self.reports_tab.setLayout(layout)

    def generate_income_report(self):
        # Generar un reporte de ingresos
        self.cursor.execute('''
            SELECT check_in_date, total_cost FROM reservations
        ''')
        data = self.cursor.fetchall()
        dates = [datetime.datetime.strptime(row[0], '%Y-%m-%d') for row in data]
        amounts = [row[1] for row in data]

        df = pd.DataFrame({'Fecha': dates, 'Ingresos': amounts})
        df = df.groupby('Fecha').sum().reset_index()

        plt.figure(figsize=(10,5))
        plt.bar(df['Fecha'], df['Ingresos'], color='green')
        plt.xlabel('Fecha')
        plt.ylabel('Ingresos')
        plt.title('Reporte de Ingresos')
        plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
        plt.gcf().autofmt_xdate()
        plt.savefig('ingresos.png')
        plt.show()

    def generate_supplier_debt_report(self):
        # Generar un reporte de deudas a proveedores
        self.cursor.execute('''
            SELECT debt_date, amount_due FROM suppliers
        ''')
        data = self.cursor.fetchall()
        dates = [datetime.datetime.strptime(row[0], '%Y-%m-%d') for row in data]
        amounts = [row[1] for row in data]

        df = pd.DataFrame({'Fecha': dates, 'Deuda': amounts})
        df = df.groupby('Fecha').sum().reset_index()

        plt.figure(figsize=(10,5))
        plt.bar(df['Fecha'], df['Deuda'], color='red')
        plt.xlabel('Fecha')
        plt.ylabel('Deuda')
        plt.title('Reporte de Deudas a Proveedores')
        plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
        plt.gcf().autofmt_xdate()
        plt.savefig('deudas_proveedores.png')
        plt.show()

    def export_report(self):
        # Exportar reportes a PDF o Word
        options = QtWidgets.QFileDialog.Options()
        file_name, _ = QtWidgets.QFileDialog.getSaveFileName(self, "Guardar Reporte", "", "PDF Files (*.pdf);;Word Files (*.docx)", options=options)
        if file_name:
            if file_name.endswith('.pdf'):
                c = canvas.Canvas(file_name, pagesize=letter)
                c.drawString(100, 750, "Reporte General")
                c.drawString(100, 730, f"Generado por: {self.current_user_name}")
                c.drawImage('ingresos.png', 50, 400, width=500, height=300)
                c.drawImage('deudas_proveedores.png', 50, 50, width=500, height=300)
                c.save()
                QtWidgets.QMessageBox.information(self, "Reporte Generado", f"El reporte ha sido guardado en '{file_name}'.")
            elif file_name.endswith('.docx'):
                doc = Document()
                doc.add_heading('Reporte General', 0)
                doc.add_paragraph(f"Generado por: {self.current_user_name}")
                doc.add_picture('ingresos.png', width=Inches(6))
                doc.add_picture('deudas_proveedores.png', width=Inches(6))
                doc.save(file_name)
                QtWidgets.QMessageBox.information(self, "Reporte Generado", f"El reporte ha sido guardado en '{file_name}'.")
            else:
                QtWidgets.QMessageBox.warning(self, "Error", "El formato de archivo no es compatible.")

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    window = HoteleroApp()
    window.show()
    sys.exit(app.exec_())
